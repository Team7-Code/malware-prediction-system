import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sqlalchemy import create_engine
from scipy import stats
from progressbar import ProgressBar
import seaborn as sns

# import pickle
x_train = pd.read_pickle("D:/Document/10 DAAN 881 - Decision Making/Project/data/train_optimized.pkl")
rat_cols = ["Census_ProcessorCoreCount","Census_PrimaryDiskTotalCapacity",
            "Census_SystemVolumeTotalCapacity","Census_TotalPhysicalRAM",
            "Census_InternalPrimaryDiagonalDisplaySizeInInches",
            "Census_InternalPrimaryDisplayResolutionHorizontal",
            "Census_InternalPrimaryDisplayResolutionVertical",
            "Census_InternalBatteryNumberOfCharges"]

path = "D:/Document/10 DAAN 881 - Decision Making/Project/data/"
# x_train.to_csv(path + "/forOpenRefine.csv", index=False)

# drop columns
cols_to_check = ["DefaultBrowsersIdentifier",
"Census_ProcessorClass",
"Census_InternalBatteryType",
"Census_IsFlightingInternal"]
for i in cols_to_check:
    if i in x_train.columns:
        print (i + "True")
    else:
        print(i + "False")

x_train.drop(cols_to_check, axis=1, inplace=True)

# replacing value with Mode
x_train["Census_ProcessorCoreCount"].value_counts()
modeProcessorCount = x_train["Census_ProcessorCoreCount"].mode()[0]
x_train["Census_ProcessorCoreCount"] = x_train["Census_ProcessorCoreCount"].replace(-1,
                                                                                    modeProcessorCount)

x_train["Census_TotalPhysicalRAM"] = x_train["Census_TotalPhysicalRAM"].fillna(x_train["Census_TotalPhysicalRAM"].mode()[0])
# x_train["Census_TotalPhysicalRAM"].isna().sum()

# NA check and replace with -1
cols_tocheck_forna = ["RtpStateBitfield",
"AVProductStatesIdentifier",
"AVProductsInstalled",
"AVProductsEnabled",
"CityIdentifier",
"OrganizationIdentifier",
"IsProtected",
"SMode",
"IeVerIdentifier",
"Firewall",
"UacLuaenable",
"Census_OEMNameIdentifier",
"Census_OEMModelIdentifier",
"Census_ProcessorManufacturerIdentifier",
"Census_ProcessorModelIdentifier",
"Census_PrimaryDiskTotalCapacity",
"Census_SystemVolumeTotalCapacity",
"Census_OSInstallLanguageIdentifier",
"Census_IsFlightsDisabled",
"Census_ThresholdOptIn",
"Census_FirmwareManufacturerIdentifier",
"Census_FirmwareVersionIdentifier",
"Census_IsWIMBootEnabled",
"Census_IsVirtualDevice",
"Census_IsAlwaysOnAlwaysConnectedCapable",
"Wdft_IsGamer",
"Wdft_RegionIdentifier"]

na_cols = []
# na_cols_check = []
for i in cols_tocheck_forna:
    if x_train[i].isna().sum() > 0:
        na_cols.append(i)
        # n_cols_check.append(i)
        print (i + " - True " + str(x_train[i].isna().sum()))
    else:
        print(i + " - False ")
x_train[na_cols] = x_train[na_cols].fillna(-1)

# columns to be filled with unknown

unknown_cols = ["SmartScreen",
"Census_PrimaryDiskTypeName",
"Census_PowerPlatformRoleName",
"Census_OSWUAutoUpdateOptionsName",
"Census_GenuineStateName"]

to_do = []
for i in unknown_cols:
    if "UNKNOWN" in x_train[i].unique():
        print (i + " True")
    else:
        to_do.append(i)
        print(i + " False")


x_train[to_do] = x_train[to_do].fillna("UNKNOWN")
# x_train[unknown_cols].isna().sum()

# remove columns which were not useful from business point of view
to_remove = ["Census_ChassisTypeName",
"Census_InternalPrimaryDiagonalDisplaySizeInInches",
"Census_InternalBatteryNumberOfCharges"]

x_train.drop(to_remove, axis=1, inplace=True)
x_train.to_pickle(path + "/x_train_cleaned.pkl")
y_train = x_train[x_train.columns[-1]]
# y_train.head()
x_train = x_train[x_train.columns[:-1]]

# cleaning Smartscreen column
x_train.SmartScreen = x_train.SmartScreen.replace("Promt", "Prompt")
x_train.SmartScreen = x_train.SmartScreen.replace("prompt", "Prompt")
x_train.SmartScreen = x_train.SmartScreen.replace("warn", "Warn")
x_train.SmartScreen = x_train.SmartScreen.replace("requireAdmin", "RequireAdmin")
x_train.SmartScreen = x_train.SmartScreen.replace("requireadmin", "RequireAdmin")
x_train.SmartScreen = x_train.SmartScreen.replace("OFF", "off")
x_train.SmartScreen = x_train.SmartScreen.replace("on", "On")
x_train.SmartScreen = x_train.SmartScreen.replace("off", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("ExistsNotSet", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("0", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("00000000", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("Enabled", "On")
x_train.SmartScreen = x_train.SmartScreen.replace("&#x02;", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("&#x01;", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("&#x03;", "Off")
x_train.SmartScreen = x_train.SmartScreen.replace("Prompt", "Warn")


from sklearn.decomposition import FactorAnalysis
transform = FactorAnalysis(n_components=50)
sample = x_train.sample(frac=0.01, replace=False, random_state=1)
sample.drop("MachineIdentifier", inplace=True, axis=1)
X_transformed = transform.fit_transform(sample)
# del X_transformed
# transform.get_covariance().shape
# transform.components_.shape
pd.DataFrame(transform.components_,columns=sample.columns).to_csv(path + "/factor_test.csv",
                                                                  index=False)
sample = sample.fillna(-1)
sample.to_csv(path + "/sample_test.csv",index=False)
for col in sample_x.select_dtypes('category').columns:
    # sample_x[col] = sample_x[col].astype('category')
    sample_x[col] = sample_x[col].cat.codes

sample.info()
x_train["SmartScreen"].value_counts()

# sample.info().to_csv(path + "/info.csv", index=False)

# sample[0:1000]
cols = sample.select_dtypes('bool').columns
sample[cols] = sample[cols].astype('int')
sample["Census_HasOpticalDiskDrive"].astype('int')

cat_cols = ["ProductName",
"EngineVersion",
"AppVersion",
"AvSigVersion",
"Platform",
"Processor",
"OsVer",
"OsPlatformSubRelease",
"OsBuildLab",
"SkuEdition",
"PuaMode",
"Census_MDC2FormFactor",
"Census_DeviceFamily",
"Census_PrimaryDiskTypeName",
"Census_PowerPlatformRoleName",
"Census_OSVersion",
"Census_OSArchitecture",
"Census_OSBranch",
"Census_OSEdition",
"Census_OSSkuName",
"Census_OSInstallTypeName",
"Census_OSWUAutoUpdateOptionsName",
"Census_GenuineStateName",
"Census_ActivationChannel",
"Census_FlightRing"]

sample_cat = sample[cat_cols]
sample_y = sample["HasDetections"]
sample.info()
rand_int = np.random.randint(0, 1000000, 20000)
sample_x = pd.DataFrame(x_train.iloc[rand_int])
sample_y = pd.DataFrame(y_train.iloc[rand_int])
chi_stat= []
for i in sample_x.columns:
    chi_stat.append(stats.chi2(np.array(sample_x[i]), np.array(sample_y)))
chi_stat[0].stats
type(sample_y)
# sample_x.info()
cols = sample_x.select_dtypes('bool').columns
sample_x[cols] = sample_x[cols].astype('int')

from sklearn.feature_selection import chi2
X_train_cat = pd.DataFrame(sample_x.select_dtypes('category'))
for col in X_train_cat.columns:
    X_train_cat[col] = X_train_cat[col].cat.codes
# X_train_cat.info()
np.array(X_train_cat[X_train_cat.columns[0]]).shape
sample_y.shape
chi_stat = chi2(np.array(X_train_cat[X_train_cat.columns[0:2]]).reshape((20000,2)),
                np.array(sample_y))
discard_features = []
chi_stat
for col, pval, score in sorted(zip(chi_stat[0], chi_stat[1], X_train_cat.columns)):
    if pval > 0.05:
        discard_features.append(score)
    print(col," ", pval," ", score)


def chi_calc(X_train_cat, y):
    # X_train_cat = X_train.select_dtypes('category')
    for col in X_train_cat.columns:
        X_train_cat[col] = X_train_cat[col].cat.codes
    chi_stat = chi2(X_train_cat, y)
    discard_features = []
    for col, pval, score in sorted(zip(chi_stat[0], chi_stat[1], X_train_cat.columns)):
        if pval > 0.05:
            discard_features.append(score)
        print(col," ", pval," ", score)
    return discard_features, chi_stat

x_train.drop(["MachineIdentifier"], axis = 1, inplace=True)
cat_cols = list(x_train.columns)
# type(chi_stat)
to_remove = ["Census_ProcessorCoreCount",
"Census_PrimaryDiskTotalCapacity",
"Census_SystemVolumeTotalCapacity",
"Census_TotalPhysicalRAM",
"Census_InternalPrimaryDisplayResolutionHorizontal",
"Census_InternalPrimaryDisplayResolutionVertical"]
for i in to_remove:
    cat_cols.remove(i)
    print(i)


x_train_cat = x_train[cat_cols]
discard_features, chi_stat = chi_calc(x_train_cat.astype('category'), y_train)
discard_features
sample_x.astype('category').dtypes

list(x_train.select_dtypes(['int16', 'float64']).columns)
x_train_cat = x_train[cat_cols]
# x_train_cat.info()
X_train_discrete_columns = X_train.columns[(X_train<0).any()]
X_train_discrete = X_train[X_train_discrete_columns]
X_train_discrete = X_train_discrete.drop("MachineIdentifier", axis=1)
X_train_discrete = X_train_discrete.astype("category")

for col in X_train_discrete.columns:
    X_train_discrete[col] = X_train_discrete[col].cat.codes


chi_stat = chi2(X_train_discrete, y)


for col, pval, score in sorted(zip(chi_stat[0], chi_stat[1], X_train_discrete.columns)):
    if pval > 0.01:
        discard_features.append(score)
    print(col," ", pval," ", score)

check_cols = ["Census_FirmwareVersionIdentifier",
"Census_OEMNameIdentifier",
"Census_OSVersion",
"OsBuildLab",
"Census_FirmwareManufacturerIdentifier",
"AVProductStatesIdentifier",
"Census_ProcessorModelIdentifier",
"PuaMode",
"IsBeta",
"UacLuaenable",
"Census_IsFlightsDisabled",
"Firewall",
"Platform",
"Census_DeviceFamily",
"ProductName",
"AutoSampleOptIn",
"HasTpm"]

len_less_10 = []
len_more_10 = []
for i in check_cols:
    temp = len(x_train[i].unique())
    if temp < 10:
        len_less_10.append(i)
    else:
        len_more_10.append(i)
# len_less_10
# len_more_10
bar = ProgressBar()

for i in bar(len_more_10):
    temp_df = pd.DataFrame(x_train[i])
    temp_df["HasDetections0"] = y_train==0
    temp_df["HasDetections1"] = y_train==1
    # temp_df.head()
    x = pd.DataFrame(temp_df.groupby([i])[["HasDetections0", "HasDetections1"]].sum())
    x["names"] = np.array(x.index.values)
    # x_axis = np.array(x.index.values)
    # temp_df.groupby(["Census_OSVersion"])["HasDetections"].count()
    # np.array(x["HasDetections0"]).shape
    x = x.sort_values(by=["HasDetections1"], ascending = False)
    to_plot = x.loc[x["names"].isin(x["names"].unique()[:10])]
    # fig, axs = plt.subplots(1, 2, figsize=(12, 12), sharey=True)
    # plt.figure(figsize=(12, 10))
    fig, ax = plt.subplots()
    ax.scatter(to_plot["names"], np.array(to_plot["HasDetections0"]),
               label="No Detections", color = "green", alpha=0.50)
    ax.scatter(to_plot["names"], np.array(to_plot["HasDetections1"]),
               label="Yes Detections", color="red", alpha=0.50)
    ax.tick_params(axis='x', labelrotation=45)
    plt.tight_layout()
    ax.legend()
    # fig.suptitle(i + " Detections")
    plt.savefig(path + "/plots/" + i + "Plot.jpg", format = 'jpg', quality=95, bbox_inches='tight')
    # plt.show()
    plt.clf()


bar = ProgressBar()
for i in bar(len_less_10):
    temp_df = pd.DataFrame(x_train[i])
    temp_df["HasDetections0"] = y_train == 0
    temp_df["HasDetections1"] = y_train == 1
    # temp_df.head()
    x = pd.DataFrame(temp_df.groupby([i])[["HasDetections0", "HasDetections1"]].sum())
    x["names"] = np.array(x.index.values)
    to_plot = pd.DataFrame(x)
    fig, ax = plt.subplots()
    ax.scatter(to_plot["names"], np.array(to_plot["HasDetections0"]),
               label="No Detections", color="green", alpha=0.50)
    ax.scatter(to_plot["names"], np.array(to_plot["HasDetections1"]),
               label="Yes Detections", color="red", alpha=0.50)
    ax.tick_params(axis='x', labelrotation=45)
    ax.tick_params(axis='x', labelrotation=45)
    plt.tight_layout()
    ax.legend()
    # fig.suptitle(i + " Detections")
    plt.savefig(path + "/plots2/" + i + "Plot.png", format='jpg', quality=95)
